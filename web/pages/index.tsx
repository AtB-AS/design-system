import Head from 'next/head';
import {useRouter} from 'next/router';
import styles from '../styles/index.module.css';

import getContrastRatio from 'get-contrast-ratio';

import {
  ContrastColor,
  createThemesFor,
  Mode,
  ThemeVariant,
} from '@atb-as/theme/lib/index';
import {useRef} from 'react';

type SettingsMode = {
  mode: Mode;
  theme: ThemeVariant;
};

const defaultSettings: SettingsMode = {
  mode: 'light',
  theme: ThemeVariant.AtB,
};

export default function Home() {
  const router = useRouter();
  const form = useRef<HTMLFormElement | null>(null);
  const onChange = () => submit(new FormData(form?.current ?? undefined));

  const submit = (data: FormData) => {
    const queryString = formDataToQuery(data);
    router.push(`/?${queryString}`);
  };

  const settings = queryToSettings(router.query);
  const theme = createThemesFor(settings.theme);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <form action="/" method="get" ref={form} onSubmit={onChange}>
          <select
            name="mode"
            id="mode"
            onChange={onChange}
            defaultValue={settings.mode}
          >
            <option value="dark">Dark</option>
            <option value="light">Light</option>
          </select>

          <select
            name="theme"
            id="theme"
            onChange={onChange}
            defaultValue={themeToString(settings.theme)}
          >
            <option value="atb">AtB</option>
            <option value="nfk">NFK</option>
          </select>
          <input type="submit" value="Velg" />
        </form>

        <h1>Colors</h1>

        <div>
          {Object.entries(theme[settings.mode].colors).map(function ([
            name,
            color,
          ]) {
            return (
              <Swatch
                key={name}
                mode={settings.mode}
                name={name}
                color={color as ContrastColor}
              />
            );
          })}
        </div>
      </main>
    </div>
  );
}

type SwatchProps = {
  name: string;
  mode: Mode;

  color: ContrastColor;
};
function Swatch({mode, name, color}: SwatchProps) {
  return (
    <div
      style={{
        backgroundColor: color.backgroundColor,
        color: color.color,
      }}
      className={styles.swatch}
    >
      <h2 className={styles.swatch__title}>
        {mode} / {name} + Text / {color.textColorType}
      </h2>
      <div className={styles.swatch__number}>
        {getContrastRatio(color.color, color.backgroundColor).toFixed(2)}
      </div>
    </div>
  );
}

function asSettings(a: any) {
  return 'mode' in a && 'theme' in a;
}

function queryToSettings(query: any): SettingsMode {
  if (asSettings(query)) {
    return {
      mode: query.mode === 'dark' ? 'dark' : 'light',
      theme: stringToTheme(query.theme),
    };
  }

  return defaultSettings;
}

function stringToTheme(theme: string): ThemeVariant {
  switch (theme) {
    case 'nfk':
      return ThemeVariant.AtB;
    default:
      return ThemeVariant.AtB;
  }
}
function themeToString(theme: ThemeVariant): string {
  switch (theme) {
    case ThemeVariant.AtB:
      return 'atb';
    default:
      return 'nfk';
  }
}

function formDataToQuery(formData: FormData) {
  let data: string[][] = Array.from(formData.entries()).map(([a, b]) => [
    a,
    b as string,
  ]);
  return new URLSearchParams(data).toString();
}
